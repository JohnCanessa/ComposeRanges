import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;


/**
 * 
 */
public class Solution {

   /**
    * Auxiliary method.
    * Populate the array list with a single value or a range - O(1).
    */
    static void singleValueOrRange(int[] nums, int i, int j, List<String> ranges) {

      // **** range generated by this method (could be a single number) ****
      String range = null;

      // **** check if this is a range of numbers ****
      if (i + 2 <= j) {
         range = nums[i] + "->" + nums[j - 1];
      }

      // **** add an single value ****
      else {
         range = String.valueOf(nums[i]);
      }

      // **** add range to array ****
      ranges.add(range); 
    }


   /**
    * Generate an array of Strings with ranges - O(n).
    */
   static String[] composeRanges1(int[] nums) {

      // **** check condition and return if needed  ****
      if (nums == null || nums.length == 0)
         return null;

      // **** array list of strings with ranges ****
      List<String> ranges = new ArrayList<String>();

      // **** check for single value ****
      if (nums.length == 1) {
         ranges.add(String.valueOf(nums[0]));
         return ranges.toArray(new String[ranges.size()]);
      }

      // **** traverse the array of integers - O(n) ****
      int i = 0;
      int j = 1;
      for (j = 1; j < nums.length; j++) {

         // **** check if this number is in sequence ****
         if (nums[j - 1] + 1 == nums[j])
            continue;

         // **** add single value or range ****
         singleValueOrRange(nums, i, j, ranges);

         // *** reset indices ****
         i = j;
         j = i;
      }

      // **** add single value or range (in case something was left behind) ****
      singleValueOrRange(nums, i, j, ranges);

      // **** convert to string array and return ****
      return ranges.toArray(new String[ranges.size()]);
   }


   /**
    * Generate an array of Strings with the ranges - O(n).
    */
   static String[] composeRanges2(int[] nums) {

      // **** check condition and return if needed  ****
      if (nums == null || nums.length == 0)
         return null;

      // **** array of ranges ****
      ArrayList<String> ranges = new ArrayList<String>();

      // **** initialize start and end array index ****
      int start = 0;
      int end = start + 1;

      // **** traverse the array of integers - O(n) ****
      while (start < nums.length) {

         // **** check if numbers are in the current range ****
         while ((end < nums.length) && (nums[end - 1] + 1 == nums[end])) {
            end++;
         }

         // **** add the current range to the array list ****
         if (start == end - 1) {
            ranges.add("" + nums[start]);
         } else {
            ranges.add(nums[start] + "->" + nums[end - 1]);
         }

         // **** update indices into nums array ****
         start = end;
         end = start + 1;
      }

      // **** convert to string array and return ****
      return ranges.toArray(new String[ranges.size()]);
   }


   /**
     * Test scaffolding.
     */
     public static void main(String[] args) {
         
         // **** open scanner ****
         Scanner sc = new Scanner(System.in);

         // **** read the line with integers ****
         String[] s = sc.nextLine().trim().split(" ");

         // **** declare array of integers ****
         int[] nums = new int[s.length];

         // **** populate array of integers ****
         for (int i = 0; i < nums.length; i++) {
            nums[i] = Integer.parseInt(s[i]);
         }

         // **** close scanner ****
         sc.close();

         // **** array of ranges ****
         String[] ranges = null;

         // **** compose ranges ****
         ranges = composeRanges1(nums);

         // **** display array of ranges ****
         System.out.println(Arrays.toString(ranges));

         // **** compose ranges ****
         ranges = composeRanges2(nums);

         // **** display array of ranges ****
         System.out.println(Arrays.toString(ranges));
     }
}